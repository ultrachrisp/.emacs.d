-*- eval: (add-hook 'after-save-hook 'org-babel-tangle 0 t) -*-
#+PROPERTY: header-args :results silent
#+PROPERTY: header-args:emacs-lisp :lexical t :tangle ~/.emacs.d/chrisp-init.el

This is a literate init file holding my Emacs configuration. It is
initially loaded by a [[file:init.el][bootstrap file]] that lives at ~/.emacs.d/init.el;
after the initial bootstrapping it writes itself to ~/.emacs.el. Since
~/.emacs.el takes priority over ~/.emacs.d/init.el, after the initial
bootstrapping process the tangled ~/.emacs.el file will get loaded
without needing to load the bootstrap file first.

* Prelude
Enables lexical binding for everything in init.el:
#+BEGIN_SRC emacs-lisp
  ;;;  -*- lexical-binding: t; -*-
#+END_SRC

** Garbage collection
Some GC tweaks [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly]["borrowed" from Doom emacs]].

Turn off GC during init and restore it afterwards:
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
      (lambda ()
	(setq gc-cons-threshold 100000000
	      gc-cons-percentage 0.1)))
#+END_SRC

Also suppress GC for 1 second after the minibuffer is active to avoid stuttering autocompletion and other GC hangups:
#+BEGIN_SRC emacs-lisp
  (defun defer-garbage-collection ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun restore-garbage-collection ()
    (run-at-time
     1 nil (lambda () (setq gc-cons-threshold 100000000))))

  (add-hook 'minibuffer-setup-hook #'defer-garbage-collection)
  (add-hook 'minibuffer-exit-hook #'restore-garbage-collection)
#+END_SRC

** Unset file-handler-alist during initialization
Another optimization from [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][Doom Emacs]].
#+BEGIN_SRC emacs-lisp
  (defvar file-name-handler-alist-backup file-name-handler-alist)
  (setq file-name-handler-alist nil)
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (setq file-name-handler-alist file-name-handler-alist-backup)))
#+END_SRC

** Variables
#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t
        frame-resize-pixelwise t
        tab-always-indent 'complete
        enable-recursive-minibuffers t
        read-process-output-max (* 1024 1024)
        bookmark-save-flag 1)
  (setq-default indent-tabs-mode nil)
#+END_SRC

* Default directory
#+BEGIN_SRC emacs-lisp
  (cd "~")
#+END_SRC

* Packages
Load [[https://github.com/raxod502/straight.el][straight.el]] to manage package installation:
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (unless (boundp 'bootstrapping-init)
   (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage)))
#+END_SRC

`use-package` is a macro that simplifies installing and loading packages.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+END_SRC

** Utility functions
#+BEGIN_SRC emacs-lisp
  (defun find-library-readme (library)
    (interactive (list (read-library-name)))
    (let* ((dir (file-name-directory (file-truename (find-library-name library))))
           (doc (car (directory-files dir t "\\(readme\\|README\\)\\..*"))))
      (if (not doc)
          (error "No README found")
        (find-file doc)
        (when (eq major-mode 'markdown-mode)
          (markdown-view-mode)))))
#+END_SRC

* Benchmarking
`benchmark-init` does what it says on the box. This sets it up to benchmark my init time and then disable benchmarking after init completes.
#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :config
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

* Load org mode
Load org-mode early to [[https://github.com/raxod502/straight.el#the-wrong-version-of-my-package-was-loaded][avoid a version clash]].
#+BEGIN_SRC emacs-lisp
  (use-package org
    :straight org-plus-contrib
    :commands (org-element-map)
    :mode (("\\.org\\'" . org-mode)))

  ;; Annoying that this is necessary...
  (require 'org)
  (require 'org-refile)
  (require 'org-protocol)
#+END_SRC

* Doom themes
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    (doom-themes-org-config))
#+END_SRC

* Customization File
I don't want anything to write to my init.el, so save customizations in a separate file:
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+END_SRC

* Autocompletion
There seems to be [[https://github.com/company-mode/company-mode/issues/68][some contention]] about whether autocomplete or company are better autocomplete packages. I'm going with company for now because the maintainer seems nicer...
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 1)
    (setq company-show-numbers t)
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-tabnine)
  (use-package company-lsp)

      ;; (general-def "C-M-i" #'company-complete)
      ;; (general-def "M-<tab>" 'company-complete))
#+END_SRC

* Which-key
`which-key` makes keybindings discoverable.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

This function defines a prefix group for `which-key` so that it doesn't display `prefix`.
#+BEGIN_SRC emacs-lisp
  ;; (defun jdormit/define-prefix (binding name)
  ;;   (which-key-add-key-based-replacements
  ;;     (concat leader " " binding)
  ;;     name)
  ;;   (which-key-add-key-based-replacements
  ;;     (concat "," " " binding)
  ;;     name))
#+END_SRC

* Magit
Magit is objectively the best Git interface.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status
               magit-blame
               magit-find-file
               magit-name-local-branch))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (jdormit/define-prefix "g" "git")
  ;; (leader-def-key "gs" #'magit-status)
  ;; (leader-def-key "gg" #'magit-file-dispatch)
  ;; (leader-def-key "gf" #'magit-find-file)
#+END_SRC

* Init File
A function to reload my init file. It reloads the major mode after the init file is loaded to rebind keymappings.
#+BEGIN_SRC emacs-lisp
  (defun reload-init-file ()
    (interactive)
    (load-file "~/.emacs.d/chrisp-init.el")
    (funcall major-mode))
#+END_SRC

And another one to edit it:
#+BEGIN_SRC emacs-lisp
  (defun find-init-file ()
    (interactive)
    (find-file "~/.emacs.d/init.org"))
#+END_SRC

* Line Numbers
Toggle line numbers:
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers-type 'visual)
  ;; (leader-def-key "tn" 'display-line-numbers-mode)
#+END_SRC

Toggle line numbering mode (normal or relative):
#+BEGIN_SRC emacs-lisp
  (defun toggle-line-number-mode ()
    (interactive)
    (when display-line-numbers
      (if (eq display-line-numbers 'visual)
          (progn
            (setq display-line-numbers t)
            (setq display-line-numbers-type t))
        (progn
          (setq display-line-numbers 'visual)
          (setq display-line-numbers-type 'visual)))))

  ;; (leader-def-key "tr" #'toggle-line-number-mode)
#+END_SRC

Display line numbers by default in code and org-mode buffers:
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'org-mode-hook #'display-line-numbers-mode)
#+END_SRC

* Winum
This package includes functions to switch windows by number.
#+BEGIN_SRC emacs-lisp
  (use-package winum
    :init (setq winum-mode-line-position 1
                winum-numbering-scope 'global)
    :config (winum-mode))
#+END_SRC

* Backups and Autosaves
Store backups and autosaves in a centralized place. This should really be the default...
#+BEGIN_SRC emacs-lisp
  (make-directory (expand-file-name "~/.emacs.d/autosaves") t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves" t)))
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC
* jq
The JSON multitool.
#+BEGIN_SRC emacs-lisp
  (use-package jq-mode
    :commands (jq-mode jq-interactively))
#+END_SRC
* Org Mode
Notes, agenda, calendar, blogging, journaling, etc.

** org-babel
   Get rid of the confirmation prompt:
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :commands (projectile-find-file
               projectile-grep
               projectile-switch-project
               projectile-project-root)
  ;;   :init
  ;;   (defhydra hydra-projectile (:color teal :hint nil) "
  ;;   PROJECTILE: %(projectile-project-root)

  ;;      Find File Search/Tags Buffers Cache
  ;; ------------------------------------------------------------------------------------------
  ;; _s-f_: file _a_: ag _i_: Ibuffer _c_: cache clear _ff_: file dwim
  ;;  _g_: update gtags _b_: switch to buffer _x_: remove known project
  ;;  _fd_: file curr dir _o_: multi-occur _s-k_: Kill all buffers _X_:
  ;;  cleanup non-existing _r_: recent file ^^^^_z_: cache current _d_:
  ;;  dir

  ;; "
  ;;     ("a" projectile-ag)
  ;;     ("b" projectile-switch-to-buffer)
  ;;     ("c" projectile-invalidate-cache)
  ;;     ("d" projectile-find-dir)
  ;;     ("s-f" projectile-find-file)
  ;;     ("ff" projectile-find-file-dwim)
  ;;     ("fd" projectile-find-file-in-directory)
  ;;     ("g" ggtags-update-tags)
  ;;     ("s-g" ggtags-update-tags)
  ;;     ("i" projectile-ibuffer)
  ;;     ("K" projectile-kill-buffers)
  ;;     ("s-k" projectile-kill-buffers)
  ;;     ("m" projectile-multi-occur)
  ;;     ("o" projectile-multi-occur)
  ;;     ("s-p" projectile-switch-project "switch project")
  ;;     ("p" projectile-switch-project)
  ;;     ("s" projectile-switch-project)
  ;;     ("r" projectile-recentf)
  ;;     ("x" projectile-remove-known-project)
  ;;     ("X" projectile-cleanup-known-projects)
  ;;     ("z" projectile-cache-current-file)
  ;;     ("`" hydra-projectile-other-window/body "other window")
  ;;     ("q" nil "cancel" :color blue))
    :config
    (projectile-mode))
    ;; (jdormit/define-prefix "p" "projectile")
    ;; (leader-def-key "p" projectile-command-map))

  (defmacro with-projectile-root (&rest body)
    `(with-temp-buffer
       (when (projectile-project-root)
         (cd (projectile-project-root)))
       ,@body))
      #+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :config    (setq helm-ff-transformer-show-only-basename nil
                     helm-adaptative-history-file           "~/.emacs.d/data/helm-adaptative-history-file"
                     helm-boring-file-regexp-list           '("\\.git$" "\\.svn$" "\\.elc$")
                     helm-yank-symbol-first                 t
                     helm-buffers-fuzzy-matching            t
                     helm-ff-auto-update-initial-value      t
                     helm-input-idle-delay                  0.1
                     helm-idle-delay                        0.1)
    :init      (progn
                 (require 'helm-config)
                 (helm-mode t)
                 (use-package helm-projectile
                   :bind      ("C-c h" . helm-projectile))
                 )
    :bind (("C-x r l" . helm-bookmarks)
           ("C-x C-m" . helm-M-x)
           ("C-h i"   . helm-google-suggest)
           ("M-y"     . helm-show-kill-ring)
           ("C-h a"   . helm-apropos)
           ("C-x C-f" . helm-find-files)
           ("C-x p" .   helm-top)
           ("C-x C-b" . helm-buffers-list))
    )
#+END_SRC
* UI
  Get rid of the janky buttons:
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC

And the menu bar:
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

And the ugly scroll bars:
#+BEGIN_SRC emacs-lisp
  (set-scroll-bar-mode nil)
#+END_SRC

* JavaScript
Some formatting stuff:
#+BEGIN_SRC emacs-lisp
  (setq js-indent-level 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :mode (("\\.html\\'" . web-mode)
             ("\\.js\\'" . web-mode)
             ("\\.jsx\\'" . web-mode))
      :config
      (add-hook 'web-mode-hook
                (lambda ()
                  (when (equal web-mode-content-type "javascript")
                    (web-mode-set-content-type "jsx"))
                  (when (or (equal web-mode-content-type "javascript")
                            (equal web-mode-content-type "jsx"))
                    (lsp-deferred)))
                ))
#+END_SRC

Use nvm to manage node versions:
#+BEGIN_SRC emacs-lisp
  (use-package nvm
    :straight ((nvm :host github :repo "rejeep/nvm.el"))
    :commands (nvm-use nvm-use-for nvm-use-for-buffer))
#+END_SRC

A command to format JS via prettier:
#+BEGIN_SRC emacs-lisp
  (defun prettier ()
    (interactive)
    (let ((start (if (use-region-p) (region-beginning) (point-min)))
          (end (if (use-region-p) (region-end) (point-max)))
          (parser (cond
                   ((eq major-mode 'graphql-mode) "graphql")
                   (t "babel"))))
      (shell-command-on-region start end (concat "prettier --parser " parser) nil t)))
#+END_SRC

* Typescript
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :mode (("\\.ts\\'" . typescript-mode)
           ("\\.tsx\\'" . typescript-mode))
    :config
    (with-eval-after-load 'lsp
      (add-hook 'typescript-mode-hook 'lsp-deferred)))
#+END_SRC
* LSP Mode
Emacs support for the Language Server Protocol

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      ;; :defer t
    ;;   :init
    ;;   (defhydra hydra-lsp (:exit t :hint nil)
    ;;     "
    ;;  Buffer^^               Server^^                   Symbol
    ;; -------------------------------------------------------------------------------------
    ;;  [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
    ;;  [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
    ;;  [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
    ;;     ("d" lsp-find-declaration)
    ;;     ("D" lsp-ui-peek-find-definitions)
    ;;     ("R" lsp-ui-peek-find-references)
    ;;     ("i" lsp-ui-peek-find-implementation)
    ;;     ("t" lsp-find-type-definition)
    ;;     ("s" lsp-signature-help)
    ;;     ("o" lsp-describe-thing-at-point)
    ;;     ("r" lsp-rename)

    ;;     ("f" lsp-format-buffer)
    ;;     ("m" lsp-ui-imenu)
    ;;     ("x" lsp-execute-code-action)

    ;;     ("M-s" lsp-describe-session)
    ;;     ("M-r" lsp-restart-workspace)
    ;;     ("S" lsp-shutdown-workspace))
      ;; :general
      ;; (lsp-mode-map "C-c h" 'hydra-lsp/body)
      ;; ((normal visual motion) lsp-mode-map "K" #'lsp-describe-thing-at-point)
      :hook
      (lsp-mode . lsp-enable-which-key-integration)
      ;; ((lsp-mode . (lambda ()
      ;;                (let ((lsp-keymap-prefix "gl"))
      ;;                  (lsp-enable-which-key-integration)))))
      ;; :config
      ;; (setq lsp-prefer-flymake nil)
      ;; (general-def '(normal visual motion) "gl" lsp-command-map)
      :commands lsp-mode lsp)
      ;; :custom
      ;; (lsp-enable-snippet nil)
      ;; (lsp-eldoc-render-all nil))

  (use-package lsp-ui
    :after (lsp-mode)
    :custom
    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-symbol t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-update-mode 'point)
    (lsp-ui-doc-alignment 'window)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-background '((t (:inherit region))))
    (lsp-ui-doc-header '((t (:inherit lsp-face-highlight-write))))
    (lsp-ui-sideline-current-symbol '((t (:inherit font-lock-constant-face
                                                   :weight ultra-bold)))))

  (use-package helm-lsp :commands helm-lsp-workspace-symbol)
  ;; if you are ivy user
  ;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; (use-package lsp-company :commands lsp-company-workspace-symbol)

    (with-eval-after-load 'lsp-clients
      (defun lsp-typescript-javascript-tsx-jsx-activate-p (filename major-mode)
        "Checks if the javascript-typescript language server should be enabled
      based on FILE-NAME and MAJOR-MODE"
        (or (member major-mode '(typescript-mode typescript-tsx-mode js-mode js2-mode rjsx-mode))
            (and (eq major-mode 'web-mode)
                 (or (string-suffix-p ".tsx" filename t)
                     (string-suffix-p ".jsx" filename t)
                     (string-suffix-p ".js" filename t))))))
#+END_SRC
* Go
Basic support:
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :mode (("\\.go\\'" . go-mode)))
#+END_SRC

LSP support - requires [[https://github.com/sourcegraph/go-langserver][go-langserver]].
#+BEGIN_SRC emacs-lisp
  (add-hook 'go-mode-hook #'lsp-deferred)
#+END_SRC


* Dictionary
This package looks up word definitions online.
#+BEGIN_SRC emacs-lisp
  (use-package define-word
    :commands (define-word define-word-at-point)
    ;; :general
    ;; (normal "gl" #'define-word-at-point)
    ;; (normal "gL" #'define-word)
    )
#+END_SRC
