#+TITLE:       Chrisp's Emacs Setup Org file.
#+STARTUP:     odd hidestars fold
#+LANGUAGE:    en
#+OPTIONS:     skip:nil toc:nil
#+HTML_HEAD:   <link rel="publisher" href="https://github.com/ultrachrisp" />

* Startup
** Enable/Disable UI modes
   
   Avoid the menubar, scrollbar and cursor blinking.

   #+begin_src emacs-lisp
     (defun ces/apply-frame-settings ()
       (dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode blink-cursor-mode))
         (when (fboundp mode) (funcall mode -1)))

       (dolist (mode '(show-paren-mode display-time-mode column-number-mode))
         (when (fboundp mode) (funcall mode 1))))

     (ces/apply-frame-settings)
   #+end_src

** Pre-startup

   Setup global functions and constants.

   #+begin_src emacs-lisp
     (defconst ces-bootstrap-dir (file-name-directory load-file-name)
       "Chrisp Emacs Setup bootstrap folder.")

     (defconst ces-emacs-dir (file-name-directory (directory-file-name ces-bootstrap-dir))
       "Chrisp Emacs Setup root folder.")

     (defconst ces-user-filename "ces-user.el"
       "Chrisp Emacs Setup user file.")

     (defun ces/mkdir-p (dir-path)
       (unless (file-exists-p dir-path)
         (make-directory dir-path t)))

     (defun ces/emacs-sub-dir (path-elements)
       (let ((ces-emacs-sub-folder ces-emacs-dir))
         (cl-loop for p in path-elements
                  do (setq ces-emacs-sub-folder (file-name-as-directory (concat ces-emacs-sub-folder p))))
         ces-emacs-sub-folder))

     (defvar ces-user-file (concat user-emacs-directory ces-user-filename))

     (mapc #'(lambda(p) (add-to-list 'load-path p))
           `( ,(ces/emacs-sub-dir '("vendor"))))

     ;; packages
     (require 'package)
     (setq package-archives '(("elpy" . "http://jorgenschaefer.github.io/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("gnu" . "http://elpa.gnu.org/packages/")
                              ("melpa-stable" . "https://stable.melpa.org/packages/")
                             ))
     (package-initialize)

     (setq epa-pinentry-mode 'loopback)

     (unless package-archive-contents
       (package-refresh-contents))
   #+end_src

** Global variables

   Setup customization variables.

   #+begin_src emacs-lisp
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; global variables defcustoms
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defgroup chrisp-emacs-setup nil
       "Chrisp Emacs Setup group."
       :group 'customize
       :prefix "ces-")

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; environment variables
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-env-variables
       '(("JAVA_HOME" . "/usr/libexec/java_home")
         ("GOPATH"    . "/usr/libexec/gocode")
         ("PATH"      . "/usr/local/bin:")
         ("EDITOR"    . "emacsclient")
         ("LC_ALL"    . "C")
         ("LANG"      . "en"))
       "Environment variables."
       :type 'symbol
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Projects
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-projectile-folder "~/.emacs.d/data/projectile"
       "Projectile folder."
       :type 'directory
       :group 'chrisp-emacs-setup)

     (defcustom ces-projectile-cache-filename "projectile.cache"
       "Projectile Cache filename"
       :type 'string
       :group 'chrisp-emacs-setup)

     (defcustom ces-projectile-bookmarks-filename "projectile-bookmarks.eld"
       "Projectile Bookmarks filename"
       :type 'string
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; indentation
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-tab-size 4
       "Number of spaces for tabs."
       :type 'integer
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; ui settings
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-ui-font
       (cond ((eq system-type 'windows-nt) "Consolas-10")
             ((eq system-type 'darwin)     "Menlo-12:bold")
             ((eq system-type 'gnu/linux)  "DejaVu Sans Mono-12:bold")
             (t                            "Monospace-12:bold"))
       "Font to use."
       :type 'string
       :group 'chrisp-emacs-setup)

     (defcustom ces-ui-theme nil
       "GUI Theme to use."
       :type 'symbol
       :group 'chrisp-emacs-setup)

     (defcustom ces-ui-theme-console nil
       "Console theme to use."
       :type 'symbol
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; spelling
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-spelling-aspell-path "/usr/local/bin/aspell"
       "Aspell location for spell-checking."
       :type 'file
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; org-mode
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-org-directory "~/.emacs.d/data/org/"
       "Org-mode folder."
       :type 'directory
       :group 'chrisp-emacs-setup)

     (defcustom ces-org-archive-location-filename "archive.org::"
       "Org-mode archive location."
       :type 'string
       :group 'chrisp-emacs-setup)

     (defcustom ces-org-notes-filename "notes.org"
       "Org-mode notes file name."
       :type 'string
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Files
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-ac-histfile "~/.emacs.d/data/ac-comphist.dat"
       "Auto-complete completion data."
       :type 'file
       :group 'chrisp-emacs-setup)

     (defcustom ces-recentf-file "~/.emacs.d/data/recentf"
       "Recent file list."
       :type 'file
       :group 'chrisp-emacs-setup)

     (defcustom ces-max-recent-files 300
       "Max number of recent files."
       :type 'integer
       :group 'chrisp-emacs-setup)

     (defcustom ces-helm-adaptative-history-file "~/.emacs.d/data/helm-adaptative-history-file"
       "Helm adaptative history file"
       :type 'file
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; eshell
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-eshell-dir "~/.emacs.d/data/eshell"
       "Eshell data folder."
       :type 'directory
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Backups
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-place-file (expand-file-name  "~/.emacs.d/data/saved-places")
       "Places file."
       :type 'directory
       :group 'chrisp-emacs-setup)

     (defcustom ces-backup-dir (expand-file-name "~/.emacs.d/data/backups")
       "Backups folder."
       :type 'directory
       :group 'chrisp-emacs-setup)

     (defcustom ces-auto-save-folder (expand-file-name "~/.emacs.d/data/auto-save-list/")
       "Auto-save folder."
       :type 'directory
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; packages
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-packages '()
       "A list of packages to ensure are installed."
       :type 'symbol
       :group 'chrisp-emacs-setup)

     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     ;; Programs
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     (defcustom ces-browser-program
       (cond ((eq system-type 'windows-nt) 'browse-url-default-windows-browser)
             ((eq system-type 'darwin)     'browse-url-default-macosx-browser)
             (t                            'browse-url-default-linux-browser))
       "Browser application:"
       :type 'symbol
       :group 'chrisp-emacs-setup)

     ;; JS
     (defcustom ces-tern-executable (or (executable-find "tern")
                                        "tern")
       "Tern executable for Javascript completion."
       :type 'string
       :group 'chrisp-emacs-setup)

     ;; Git
     (defcustom ces-yagist-token ""
       "Yagist Github token for gists."
       :type 'string
       :group 'chrisp-emacs-setup)

   #+end_src

** Post-startup
   Define package utility methods and install default packages.

   #+begin_src emacs-lisp
     (defun ces/package-install (pkg)
       "Install a package."
       (unless (package-installed-p pkg)
         (package-install pkg)))
     
     (defun ces/packages-install (pkgs)
       "Install a list of packages."
       (if (listp pkgs)
           (mapc #'ces/package-install pkgs)
         (error "The list of packages must be a list!")))
     
     (ces/packages-install (cons 'use-package ces-packages))
     
     (mapc #'require '(use-package netrc))
     
     (ces/mkdir-p ces-org-directory)
   #+end_src

* Sane defaults

  Setup some emacs defaults.

  #+begin_src emacs-lisp

    ;; Rebind some keys.
    (let ((key-bindings '(("C-s" . isearch-forward-regexp)
                          ("C-r" . isearch-backward-regexp))))
      (cl-loop for key-binding in key-bindings
               do `(bind-key* ,(car key-binding) (cdr key-binding))))

    ;; Enable disabled commands.
    (cl-loop for fn in '(downcase-region upcase-region erase-buffer)
             do (put fn 'disabled nil))

    (setq global-auto-revert-non-file-buffers t)

    ;; Transparently open compressed files.
    (auto-compression-mode t)

  #+end_src

* Backups and bookmarks

  Setup backups.

  #+begin_src emacs-lisp

    (setq backup-directory-alist         `(("." . ,ces-backup-dir))
          delete-old-versions            t
          kept-new-versions              6
          kept-old-versions              2
          version-control                t
          auto-save-list-file-prefix     ces-auto-save-folder
          tramp-auto-save-directory      ces-auto-save-folder)

  #+end_src

* Aliases

  Define some basic aliases for commonly used commands.

  #+begin_src emacs-lisp

    (defalias 'yes-or-no-p 'y-or-n-p)
    (defalias 'serc        'ces/start-ces)

  #+end_src
  
* Utility functions

  #+begin_src emacs-lisp

    (defun ces/burry-other-buffer ()
      "Close other buffer window."
      (interactive)
      (when (window-parent)
        (other-window -1)
        (bury-buffer)
        (other-window -1)))

    (defun ces/eval-and-replace (value)
      "Evaluate the sexp at point and replace it with its value"
      (interactive (list (eval-last-sexp nil)))
      (kill-sexp -1)
      (insert (format "%S" value)))

    (defun ces/get-string-from-file (filePath)
      "Return filePath's file content."
      (with-temp-buffer
        (insert-file-contents filePath)
        (buffer-string)))

    (defun ces/comment-or-uncomment-line-or-region ()
      "Comment or uncomment the current line or region."
      (interactive)
      (if (region-active-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
        (comment-or-uncomment-region (line-beginning-position) (line-end-position))))

    (defun ces/copy-symbol-at-point ()
      "Copy the symbol at point."
      (interactive)
      (let ((b (bounds-of-thing-at-point 'symbol)))
        (when b
          (save-excursion
            (kill-ring-save (car b) (cdr b))))))

    (when (eq system-type 'darwin)
      (defvar osx-pbpaste-cmd "/usr/bin/pbpaste"
        "*command-line paste program")

      (defvar osx-pbcopy-cmd "/usr/bin/pbcopy"
        "*command-line copy program")

      (defun osx-pbpaste ()
        "paste the contents of the os x clipboard into the buffer at point."
        (interactive)
        (call-process osx-pbpaste-cmd nil t t))

      (defun osx-pbcopy ()
        "copy the contents of the region into the os x clipboard."
        (interactive)
        (if (or (and (boundp 'mark-active) mark-active)
                (and (fboundp 'region-exists-p) (region-exists-p)))
            (call-process-region
             (region-beginning) (region-end) osx-pbcopy-cmd nil t t)
          (error "region not selected"))))

    (defun ces/recompile-init-files()
      "Recompile emacsd files."
      (interactive)
      (byte-recompile-directory user-emacs-directory 0 nil))

  #+end_src

* Encoding settings

  #+begin_src emacs-lisp

    (set-language-environment   'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq locale-coding-system  'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)

    (unless (eq system-type 'windows-nt)
      (set-selection-coding-system 'utf-8))

    (prefer-coding-system 'utf-8)

  #+end_src

* Eshell configuration
  
  #+begin_src emacs-lisp

    (setq eshell-directory-name ces-eshell-dir)
    
    ;; Set environment variables
    (cl-loop for env-var in ces-env-variables
             do (setenv (car env-var) (cdr env-var)))
    
    (use-package exec-path-from-shell
      :ensure exec-path-from-shell
      :if (eq system-type 'darwin)
      :config (progn
                (setq exec-path-from-shell-variables '("PATH" "MANPATH" "SHELL"))
                (exec-path-from-shell-initialize)))
    
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; EShell settings
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (require 'eshell)
    
    (require 'vc-git)
    (defun get-git-branch-name (path)
      (let ((git-directory (concat path "/.git")))
        (if (file-exists-p git-directory)
            (concat " (" (vc-git-mode-line-string git-directory) ") ")
          "")))
    
    (defun get-full-time()
      "Full date and time"
      (format-time-string "%a %d.%m.%y %H:%M:%S" (current-time)))
    
    (setq eshell-prompt-function (lambda nil
                                   (concat
                                    "\n"
                                    (concat "[" (eshell/pwd) "] - " (get-full-time))
                                    "\n"
                                    (user-login-name)
                                    "@"
                                    (system-name)
                                    (get-git-branch-name (eshell/pwd))
                                    " $ " )))
    
    (setq eshell-highlight-prompt       nil
          eshell-history-size           8000
          eshell-path-env               (getenv "PATH")
          eshell-cmpl-cycle-completions nil
          eshell-prompt-regexp          "^[^#$]*[#$] ")
    
    (if (boundp 'eshell-save-history-on-exit)
        (setq eshell-save-history-on-exit t)) ; Don't ask, just save
    
    (if (boundp 'eshell-ask-to-save-history)
        (setq eshell-ask-to-save-history 'always)) ; For older(?) version
    
    (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
    (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
    
    (defun up (&optional level)
      "Change directory from one up to a level of folders."
      (let* ((path-level (or level 1))
             (path-levels-list (cl-loop for i from path-level downto 1 collect "../"))
             (path-string (apply #'concat path-levels-list)))
        (cd path-string)))

  #+end_src

* Indentation settings

  #+begin_src emacs-lisp

    (setq-default indent-tabs-mode nil)

    (defun ces/indentation-apply-style ()
      (cl-loop for elt in '("c-basic-offset"
                            "tab-width"
                            "js2-basic-offset"
                            "js-indent-level"
                            "py-indent-offset"
                            "sgml-basic-offset")
               do (progn
                    (eval `(setq-default ,(intern elt) ces-tab-size))
                    (eval `(setq ,(intern elt) ces-tab-size)))))

    (defun ces/indentation-reset-tab-size (new-tab-size)
      (interactive "nEnter new tab size:\n")
      (setq ces-tab-size new-tab-size)
      (ces/indentation-apply-style))

    (ces/indentation-apply-style)

    (defun ces/indent-region-or-buffer ()
      "Indents an entire buffer using the default intenting scheme."
      (interactive)

      (if (region-active-p)
          (indent-region (region-beginning) (region-end))
        (progn
          (delete-trailing-whitespace)
          (indent-region (point-min) (point-max) nil)
          (untabify (point-min) (point-max)))))

    (bind-key "C-c i" 'ces/indent-region-or-buffer)
    (bind-key "RET"   'newline-and-indent)

  #+end_src

* Org mode settings

  [[http://orgmode.org][org-mode]] configuration.

  #+begin_src emacs-lisp

    (use-package org
      :ensure htmlize
      :init (progn
              (setq org-directory ces-org-directory)

              ;; default settings
              (setq org-archive-location (concat org-directory ces-org-archive-location-filename)
                    org-agenda-files (directory-files org-directory t "\.org$")
                    org-export-html-postamble nil
                    org-ces-notes-file (concat org-directory ces-org-notes-filename))

              ;; org capture menu
              (setq org-capture-templates
                    '(("d" "Tasks" entry
                       (file+headline org-ces-notes-file "Tasks")
                       "* TODO %?
    SCHEDULED: %^t"  :clock-in t :clock-resume t)

                      ("e" "Quick task" entry
                       (file+headline org-ces-notes-file "Tasks")
                       "* TODO %^{Task}
    SCHEDULED: %^t"  :immediate-finish t)
                      ("f" "Orientation" entry (file org-ces-notes-file)
                       "* ORIENTATION %? :@orientation:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)
                      ("g" "Coding" entry (file org-ces-notes-file)
                       "* CODING%? :@coding:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)
                      ("h" "Help" entry (file org-ces-notes-file)
                       "* HELP %? :@help:
    SCHEDULED: %^t"  :clock-in t :clock-resume t)
                      ("i" "Phone call" entry (file org-ces-notes-file)
                       "* PHONE %? :@phone:
    SCHEDULED: %^t"   :clock-in t :clock-resume t)
                      ("j" "Mail browsing" entry (file org-ces-notes-file)
                       "* EMAIL Browsing :@email:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)
                      ("k" "Mail reply" entry (file org-ces-notes-file)
                       "* EMAIL Reply %? :@email:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)

                      ("k" "Team Meetings" entry (file org-ces-notes-file)
                       "* TEAM MEETING :@meeting:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)

                      ("k" "Other meetings" entry (file org-ces-notes-file)
                       "* MEETING %? :@meeting:
    SCHEDULED: %^t"   :clock-in t :clock-resume t)

                      ("l" "Break" entry (file org-ces-notes-file)
                       "* BREAK :@break:
    SCHEDULED: %^t"    :clock-in t :clock-resume t)))

              ;; todo states
              (setq org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)" "|" "WAITING(w)")
                                        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
                                        (sequence "|" "CANCELED(c)")))

              ;; tags
              (setq org-tag-alist '(("@orientation" . ?a)
                                    ("@coding" . ?b)
                                    ("@help" . ?c)
                                    ("@phone" . ?d)
                                    ("@documentation" . ?e)
                                    ("@meeting" . ?f)
                                    ("@email" . ?g)
                                    ("@break" . ?h)
                                    ("@study" . ?i)
                                    ("@slack" . ?j)
                                    ("@chat" . ?k)
                                    ))

              ;; require htmlize.el
              (setq org-agenda-exporter-settings'((ps-number-of-columns 2)
                                                  (ps-landscape-mode t)
                                                  (org-agenda-add-entry-text-maxlines 5)
                                                  (htmlize-output-type 'css)))))

              ;; time estimates
              (setq org-global-properties '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 16:00 24:00 32:00 40:00")))

              ;; agenda display
              (setq org-columns-default-format '"%40ITEM(Task) %10TAGS %17Effort(Estimated Effort){:} %CLOCKSUM %CLOCKSUM_T")

              ;; format string used when creating CLOCKSUM lines and when generating a time duration (avoid showing days)
              (setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

  #+end_src

* Programming
** Version control
  
  Nowadays it's either SVN(or similar) for legacy systems and Git for anything else.

  - [[http://www.emacswiki.org/emacs/SvnStatusMode#toc5][dsvn]] : dsvn is a subversion mode influenced by pcsv and psvn.
  - [[http://magit.github.io][magit]] : Magit is an emacs mode for interacting with the Git version control system. 
  - [[https://github.com/pidu/git-timemachine][git-timemachine]] : Step through historic versions of git controlled file using everyone's favourite editor.
  - [[https://github.com/mhayashi1120/yagist.el][yagist.el]]: Yet another Emacs paste mode, this one for Gist.

  #+begin_src emacs-lisp

            (use-package vc-svn
              :ensure    dsvn
              :defer     t
              :init      (progn
                           (autoload 'svn-status "dsvn" "Run `svn status'." t)
                           (autoload 'svn-update "dsvn" "Run `svn update'." t)))

            (use-package magit
              :ensure    t
              :defer     t)

            (use-package git-timemachine
              :ensure    t
              :defer     t
              :bind      ("C-x gt" . git-timemachine))

  #+end_src
** Arduino
#+begin_src emacs-lisp

(use-package arduino
  :ensure    projectile
  :defer     t
  :mode      (("\\.\\(pde\\|ino\\)$" . arduino-mode)))

;; Configure arduino OS X dirs.
(setq ede-arduino-appdir "/Applications/Arduino.app/Contents/Java")
#+end_src

** Project management

   Use [[https://github.com/bbatsov/projectile][Projectile]] for project management.

   #+begin_src emacs-lisp
     (use-package projectile
       :ensure    projectile
       :defer     t
       :config    (projectile-global-mode t)
       :init      (progn
		    ;; create projectile data folder if non-existent
		    (ces/mkdir-p ces-projectile-folder)

		    ;; set projectile custom variables
		    (let* ((ces-projectile-dir (file-name-as-directory ces-projectile-folder))
			   (ces-projectile-cache-file (concat ces-projectile-dir ces-projectile-cache-filename))
			   (ces-projectile-bookmarks-file (concat ces-projectile-dir ces-projectile-bookmarks-filename)))
		      (setq projectile-cache-file          ces-projectile-cache-file
			    projectile-known-projects-file ces-projectile-bookmarks-file
			    projectile-indexing-method     'alien
			    projectile-enable-caching      t)))
       :diminish   projectile-mode)
   #+end_src

** CEDET

   Trying out [[http://cedet.sourceforge.net/][CEDET]] for development

https://github.com/dholm/dotemacs/blob/master/.emacs.d/lisp/utilities/cedet.el

#+begin_src emacs-lisp
(defun user--cedet-hook ()
  "Hook for modes with CEDET support."
  ;; Enable EDE.
  (ede-minor-mode t)

  ;; Enable semantic.
  (semantic-mode t))

(defun user--semantic-mode-hook ()
  "Semantic mode hook."
  (when (semantic-active-p)
    ;; Scan source code automatically during idle time.
    (semantic-idle-scheduler-mode t)
    ;; Show breadcrumbs during idle time.
    (semantic-idle-breadcrumbs-mode t)
    ;; Show summary of tag at point during idle time.
    (semantic-idle-summary-mode t)
    
    ;; Highlight the first line of the current tag.
    (semantic-highlight-func-mode t)
    ;; Breadcrumbs should be sticky.
    (semantic-stickyfunc-mode t)
    
    ;; Use semantic as a source for auto complete.
    (add-ac-sources 'ac-source-semantic)
    
    (user/tags-try-enable)
    
    ;;; (Bindings) ;;;
    (user/bind-key-local :nav :jump-spec-impl 'semantic-analyze-proto-impl-toggle)))

(defun user--ede-minor-mode-hook ()
  "EDE minor mode hook."
  (cond
   ((user/auto-complete-p)
    (with-feature 'auto-complete-c-headers
                  (setq
                   ;; Configure include path for auto completion.
                   achead:get-include-directories-function
                   'ede-object-system-include-path)))
   ((user/company-mode-p)
    (with-feature 'auto-complete-c-headers
                  (setq
                   ;; Configure include path for auto completion.
                   company-c-headers-path-system
                   'ede-object-system-include-path)))))

(use-package semantic
  :ensure nil
  :defer
  :init
  (add-hook 'semantic-mode-hook 'user--semantic-mode-hook)
  :config
  (when *user-cedet-ectags-enabled*
    ;; Enable [ec]tags support.
    (with-feature 'semantic/ectags/util
                  (when (and (fboundp 'cedet-ectag-version-check)
                             (cedet-ectag-version-check t))
                    (semantic-load-enable-primary-ectags-support)))))

(use-package semantic/idle
  :ensure nil
  :defer
  :config
  (validate-setq
   ;; Nice looking breadcrumbs.
   semantic-idle-breadcrumbs-format-tag-function 'semantic-format-tag-summarize
   semantic-idle-breadcrumbs-separator " ⊃ "
   semantic-idle-breadcrumbs-header-line-prefix " ≝ "))

#+end_src

** Completion, matching and suggestions
*** Auto-completion settings
    
   Use [[http://company-mode.github.io][company-mode]] for text completion.

#+begin_src emacs-lisp
(use-package company
  :ensure    t
  :config (add-hook 'after-init-hook 'global-company-mode)

  ;; Trigger completion immediately.
  (setq company-idle-delay 0)

  ; Show suggestions after entering one character.
  (setq company-minimum-prefix-length 1)

  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (setq company-show-numbers t)

  ;; Disable company-mode in org-mode 
  (setq company-global-modes '(not org-mode))

  ;; Use the tab-and-go frontend.
  ;; Allows TAB to select and complete at the same time.
  (company-tng-configure-default)
  (setq company-frontends
        '(company-tng-frontend
          company-pseudo-tooltip-frontend
          company-echo-metadata-frontend)))
#+end_src

*** Tabnine
    
#+begin_src emacs-lisp
(use-package company-tabnine :ensure t)
#+end_src

*** Helm settings

   [[https://github.com/emacs-helm/helm][Helm]] is an incremental completion and selection narrowing framework.

   There are couple of interesting integration modules :

   - [[https://github.com/syohex/emacs-helm-ag][emacs-helm-ag]]
   - [[https://github.com/bbatsov/projectile][helm-projectile]]
   - [[https://github.com/ShingoFukuyama/helm-swoop][helm-swoop]]
    
   #+begin_src emacs-lisp

     (use-package helm
       :ensure    helm
       :defer     t
       :config    (setq helm-ff-transformer-show-only-basename nil
                        helm-adaptative-history-file           ces-helm-adaptative-history-file
                        helm-boring-file-regexp-list           '("\\.git$" "\\.svn$" "\\.elc$")
                        helm-yank-symbol-first                 t
                        helm-buffers-fuzzy-matching            t
                        helm-ff-auto-update-initial-value      t
                        helm-input-idle-delay                  0.1
                        helm-idle-delay                        0.1)

       :init      (progn
                    (require 'helm-config)
                    (helm-mode t)
                    ;(helm-adaptative-mode t)

                    (use-package helm-ag
                      :ensure    helm-ag
                      :bind      ("C-c a" . helm-ag))

                    (use-package helm-descbinds
                      :ensure    helm-descbinds
                      :bind      ("C-h b"   . helm-descbinds))

                    (use-package helm-projectile
                      :ensure    helm-projectile
                      :bind      ("C-c h" . helm-projectile))

                    (add-hook 'eshell-mode-hook
                              #'(lambda ()
                                  (bind-key "M-p" 'helm-eshell-history eshell-mode-map)))

                    (use-package helm-swoop
                      :ensure    helm-swoop
                      :bind      (("C-c o" . helm-swoop)
                                  ("C-c M-o" . helm-multi-swoop)))

                    (bind-key "C-c C-SPC" 'helm-ff-run-toggle-auto-update helm-find-files-map))

       :bind (("C-x r l" . helm-bookmarks)
              ("C-x C-m" . helm-M-x)
              ("C-h i"   . helm-google-suggest)
              ("M-y"     . helm-show-kill-ring)
              ("C-h a"   . helm-apropos)
              ("C-x C-f" . helm-find-files)
              ("C-x p" .   helm-top)
              ("C-x C-b" . helm-buffers-list))

       :diminish helm-mode)

   #+end_src

** XML mode

   #+begin_src emacs-lisp

     (use-package nxml-mode
       :init      (setq nxml-slash-auto-complete-flag t
                        nxml-child-indent             ces-tab-size
                        nxml-outline-child-indent     ces-tab-size)
       :defer     t
       :mode      ("\\.\\(pom\\|xsd\\|xsl\\|xslt\\|gsp\\)$" . nxml-mode))

   #+end_src

** Web
*** Styling

    #+begin_src emacs-lisp

      (use-package sass-mode
        :ensure    t
        :defer     t
        :init      (add-hook 'sass-mode-hook (lambda () (setq comment-start "//")))
        :config    (setq sass-indent-offset ces-tab-size)
        :mode      (("\\.\\(scss\\|sass\\|css\\)$" . sass-mode)))

    #+end_src

*** Scripting

    #+begin_src emacs-lisp

      (use-package js2-mode
        :ensure    t
        :defer     t
        :init      (setq js2-indent-level          ces-tab-size
                         js2-mode-dev-mode-p       t
                         js2-auto-indent-p         t
                         js2-enter-indents-newline t
                         js2-indent-on-enter-key   t)
        :mode      ("\\.\\(js\\|tern-project\\)$" . js2-mode))

      (use-package typescript-mode
        :mode   (("\\.ts\\'" . typescript-mode)
                 ("\\.tsx\\'" . typescript-mode))
        :config (add-hook 'typescript-mode-hook 'emmet-mode)
                (add-hook 'typescript-mode-hook 'company-mode)
                (add-hook 'typescript-mode-hook 'eldoc-mode)
                ;; (add-hook 'typescript-mode-hook 'web-mode)
                ;; (add-hook 'typescript-mode-hook 'sass-mode)
        )

      (defun setup-tide-mode ()
        (interactive)
        (tide-setup)
        (defun tide-imenu-index () nil)
        (setq-default typescript-indent-level ces-tab-size)
        (tide-hl-identifier-mode +1)
        (flycheck-mode +1)
        (setq flycheck-check-syntax-automatically '(save-mode-enabled)))

      (use-package tide
        :ensure t
        :config
          (setq company-tooltip-align-annotations t)
          (add-hook 'before-save-hook 'tide-format-before-save)
          (add-hook 'typescript-mode-hook #'setup-tide-mode))

      (use-package tern
        :ensure    t
        :defer     t
        :config    (setq tern-command (list (expand-file-name ces-tern-executable))))

      (use-package company-tern
        :ensure    t
        :defer     t
        :init      (with-eval-after-load 'company)
        :config    (add-to-list 'company-backends 'company-tern)
                   (add-hook 'js2-mode-hook 'tern-mode))

      (use-package rjsx-mode
        :ensure    t
        :defer     t
        :init      (add-hook 'rjsx-mode-hook 'emmet-mode)
                   (add-hook 'rjsx-mode-hook 'tern-mode)
        :mode      ("\\(components\\|containers\\|actions\\|reducers\\)\\/.*\\.js\\'" . rjsx-mode))

      (use-package json-mode
        :ensure    t
        :defer     t
        :config    (bind-keys :map json-mode-map
                              ("C-c i" . json-mode-beautify))
        :mode      ("\\.\\(json\\)$" . json-mode))

    #+end_src

*** Markup

    #+begin_src emacs-lisp

      (use-package web-mode
        :ensure    t
        :defer     t
        :init      (add-hook 'web-mode-hook 'emmet-mode)
        :config    (setq web-mode-style-padding        ces-tab-size
                       	 web-mode-script-padding       ces-tab-size
                         web-mode-markup-indent-offset ces-tab-size)
        :mode      ("\\.\\(html\\|htm\\)$" . web-mode))

      (use-package emmet-mode
        :ensure    t
        :defer     t)

    #+end_src

*** Markdown

    #+begin_src emacs-lisp
       (use-package markdown-mode
         :ensure t
         :commands (markdown-mode gfm-mode)
         :mode (("README\\.md\\'" . gfm-mode))
         :init (setq markdown-command "/usr/local/bin/multimarkdown"))

    #+end_src

** Clojure
*** Clojure
#+begin_src emacs-lisp

(use-package clojure-mode
  :ensure t
  :mode (("\\.clj\\'" . clojure-mode)
         ("\\.edn\\'" . clojure-mode))
  :init
        (add-hook 'clojure-mode-hook #'subword-mode))

#+end_src

*** Cider

#+begin_src emacs-lisp

(use-package cider
  :ensure t
  :defer t
  :init (add-hook 'cider-mode-hook #'clj-refactor-mode)
  :diminish subword-mode
  :config
  (setq nrepl-log-messages t                  
        cider-repl-display-in-current-window t
        cider-repl-use-clojure-font-lock t    
        cider-prompt-save-file-on-load 'always-save
        cider-font-lock-dynamically '(macro core function var)
        nrepl-hide-special-buffers t            
        cider-overlays-use-font-lock t)         
  (cider-repl-toggle-pretty-printing))

#+end_src
*** Paredit
#+begin_src emacs-lisp

(use-package paredit
  :ensure t
  :defer t
  :init (add-hook 'clojure-mode-hook #'paredit-mode))

#+end_src
** C++
   #+begin_src emacs-lisp
   (use-package irony
     :ensure t
     :defer  t
     :config
     (progn (use-package company-irony
              :ensure t
              :config
              (add-to-list 'company-backends 'company-irony))
            )
     (add-hook 'c++-mode-hook 'irony-mode))
   #+end_src
** Python

#+begin_src emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :mode      ("\\.\\(py\\)$" . python-mode)
  :config
  (progn
    ;; Use Flycheck instead of Flymake
    (when (require 'flycheck nil t)
      (remove-hook 'elpy-modules 'elpy-module-flymake)
      (remove-hook 'elpy-modules 'elpy-module-yasnippet)
      (remove-hook 'elpy-mode-hook 'elpy-module-highlight-indentation)
      (add-hook 'elpy-mode-hook 'flycheck-mode))
    (elpy-enable)
    ;; jedi is great
    (setq elpy-rpc-backend "jedi")))
(add-hook 'python-mode-hook #'elpy-mode)
#+end_src

** Ensime

   Ensime for Scala development.

  #+begin_src emacs-lisp

    (use-package ensime
      :ensure    t
      :defer     t
      :pin melpa-stable)

  #+end_src

** YAML

  YAML markup.

  #+begin_src emacs-lisp

    (use-package yaml-mode
      :ensure    t
      :defer     t
      :mode      ("\\.yml$" . yaml-mode))

  #+end_src
  
** Go

 #+begin_src emacs-lisp

;     (setenv "GOPATH" "/Users/Chrisp/Development/gocode")

     (setq exec-path (cons "/usr/local/opt/go/libexec" exec-path))
     (add-to-list 'exec-path "/Users/Chrisp/Development/gocode/bin")

;     (use-package go-eldoc
;       :ensure    go-eldoc
;       :init      (add-hook 'go-mode-hook 'go-eldoc-setup))

     (use-package flymake
       :ensure    t
       :defer     t)

     (use-package flymake-go
       :ensure    t
       :defer     t)

;     (use-package company-go
;       :ensure    company-go
;       :config    (with-eval-after-load 'company
;                  (add-to-list 'company-backends 'company-go)))


     (use-package go-mode
       :ensure    t
       :defer     t
       :init      (progn
                  (setq gofmt-command "goimports")
                  (add-hook 'go-mode-hook 'go-eldoc-setup)
                  (add-hook 'before-save-hook 'gofmt-before-save)
                  (bind-key [remap find-tag] #'godef-jump))

       :config    (with-eval-after-load 'go-mode
                  (add-hook 'go-mode-hook 'flymake-go)))

#+end_src

** Security

  #+begin_src epa-file

    (use-package epa-file
      :ensure    t
      :defer     t)

  #+end_src

* Spellchecking configuration

  #+begin_src emacs-lisp

    (setq ispell-program-name ces-spelling-aspell-path)

  #+end_src

* Various utilities

  #+begin_src emacs-lisp

    (defun setup-aliases (aliases)
      (interactive)
      (dolist (lst aliases)
        (defalias (car lst) (cdr lst))))

    (defun add-hooks (hook cb-list)
      "Add a set of function hooks to a hook."
      (mapc #'(lamba (cb) (add-hook hook cb))
            cb-list))

    (defun ces/user-emacs-subdir (path-name)
      "sub-directory path in `user-emacs-directory."
      (expand-file-name
       (file-name-as-directory (concat user-emacs-directory path-name))))

    (defun emacs-data-file (sub-folder)
      "Emacs file in data directory of .emacs.d."
      (let ((data-folder (concat user-emacs-directory "data")))
        (file-name-as-directory data-folder)))

    (defun switch-max-window ()
      (interactive)
      (other-window -1)
      (delete-other-windows))

    (bind-key* "C-h o" 'switch-max-window)

    (bind-key* "C-x M-k"  '(lambda () (interactive)
                             (let (kill-buffer-query-functions) (kill-buffer))))

    (defun rotate-windows ()
      "Rotate your windows"
      (interactive)
      (cond
       ((not (> (count-windows) 1))
        (message "You can't rotate a single window!"))
       (t
        (let ((i 0)
              (num-windows (count-windows)))
          (while  (< i (- num-windows 1))
            (let* ((w1 (elt (window-list) i))
                   (w2 (elt (window-list) (% (+ i 1) num-windows)))
                   (b1 (window-buffer w1))
                   (b2 (window-buffer w2))
                   (s1 (window-start w1))
                   (s2 (window-start w2)))
              (set-window-buffer w1 b2)
              (set-window-buffer w2 b1)
              (set-window-start w1 s2)
              (set-window-start w2 s1)
              (setq i (1+ i))))))))

    (bind-key* "C-h w" 'rotate-windows)

    (defun ces/insert-time (&optional date-pattern)
      "Inserts the time given an optional pattern."
      (interactive "P")
      (let ((current-date-pattern (or date-pattern "%a %d.%m.%y %H:%M:%S")))
        (insert (ces/get-date current-date-pattern))))

    (defun ces/get-date (date-pattern)
      "Returns a formatted date for a given pattern."
      (format-time-string date-pattern (current-time)))

    (defun ces/insert-date-simple ()
      "Inserts the time in year-month-date format."
      (interactive)
      (ces/insert-time "%Y-%m-%d"))

    (defun ces/insert-date-raw ()
      "Insert the time in raw format."
      (interactive)
      (ces/insert-time "%Y%m%d.%H%M%S"))

    (defun ces/insert-date-full()
      "Inserts the full date and time."
      (interactive)
      (ces/insert-time "%a %d.%m.%y %T"))

    (defun open-next-line (arg)
      "Move to the next line and then opens a line.
                                    See also `newline-and-indent'."
      (interactive "p")
      (end-of-line)
      (open-line arg)
      (forward-line 1))

    (defun open-previous-line (arg)
      "Open a new line before the current one.
                                     See also `newline-and-indent'."
      (interactive "p")
      (beginning-of-line)
      (open-line arg))

    (use-package ace-window
      :ensure    ace-window
      :bind      ("C-x o" . ace-window))

    (use-package anzu
      :ensure    anzu
      :config    (global-anzu-mode t)
      :diminish  anzu-mode)

    (use-package wrap-region
      :ensure    wrap-region
      :config    (wrap-region-global-mode t)
      :diminish  wrap-region-mode)

    (use-package undo-tree
      :ensure    undo-tree
      :config    (global-undo-tree-mode t)
      :init      (setq undo-tree-visualizer-relative-timestamps  t
                       undo-tree-visualizer-timestamps           t)
      :diminish  undo-tree-mode)

    (use-package expand-region
      :ensure    expand-region
      :bind      ("C-c e" . er/expand-region))

    (use-package hl-line
      :init     (add-hook 'prog-mode-hook 'hl-line-mode))

    (use-package linum
      :init      (setq linum-format (quote "%4d "))
      :config    (add-hook 'prog-mode-hook 'linum-mode))

    (use-package ace-jump-mode
      :ensure    ace-jump-mode
      :bind      (("C-c gw" . ace-jump-word-mode)
                  ("C-c gc" . ace-jump-char-mode)
                  ("C-c gl" . ace-jump-line-mode))
      :diminish  ace-jump-mode)

    (use-package uniquify
      :config    (setq uniquify-separator           "/"
                       uniquify-buffer-name-style   'forward
                       uniquify-after-kill-buffer-p t
                       uniquify-ignore-buffers-re   "^\\*"))

    (use-package saveplace
      :init (progn (setq-default save-place t)
                   (setq save-place-file ces-place-file)))

    (use-package recentf
      :init (progn (setq recentf-max-menu-items ces-max-recent-files
                         recentf-exclude        '("/tmp" "/ssh:" "\\ido.last" "recentf")
                         recentf-save-file      ces-recentf-file)
                   (recentf-mode +1))

      :bind ("C-x C-r" . helm-recentf))

    (use-package ls-lisp
      :config (setq ls-lisp-use-insert-directory-program nil
                    ls-lisp-dirs-first t
                    ls-list-ignore-case t))

    (use-package dired
      :defer t
      :init (setq dired-recursive-deletes 'always
                  dired-recursive-copies  'always)
      :config (progn
                (put 'dired-find-alternate-file 'disabled nil)
                (defun ces/dired-go-to-first-item ()
                  (interactive)
                  (goto-char (point-min))
                  (dired-next-line 3))

                (defun ces/dired-go-to-last-item ()
                  (interactive)
                  (goto-char (point-max))
                  (dired-previous-line 1))

                (defun copy-file-name-to-clipboard ()
                  "Copy the current buffer file name to the clipboard."
                  (interactive)
                  (let ((filename (if (equal major-mode 'dired-mode)
                                      (dired-filename-at-point)
                                    (buffer-file-name))))
                    (when filename
                      (kill-new filename)
                      (message "Copied buffer file name '%s' to the clipboard." filename))))

                (bind-keys :map dired-mode-map
                           ("."   .  dired-up-directory)
                           ("@"   .  copy-file-name-to-clipboard )
                           ("M-P" .  ces/dired-go-to-first-item )
                           ("M-N" .  ces/dired-go-to-last-item ))))

    (use-package drag-stuff
      :ensure    drag-stuff
      :bind      (("M-P" . drag-stuff-up)
                  ("M-N" . drag-stuff-down)))

    (use-package rainbow-delimiters
      :ensure    rainbow-delimiters
      :init      (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

    (use-package ag
      :ensure    ag)

    (use-package duplicate-thing
      :ensure    duplicate-thing
      :bind      ("C-c d" . duplicate-thing))

    (let ((ces-keybindings `((,(kbd "C-o")     . open-next-line)
                             (,(kbd "C-h M-w") . copy-file-name-to-clipboard)
                             (,(kbd "M-o")     . open-previous-line)
                             (,(kbd "C-x 4 k") . ces/burry-other-buffer)
                             (,(kbd "C-c C-e") . ces/eval-and-replace)
                             (,(kbd "C-c j")   . join-line)
                             (,(kbd "C-c M-j") . (lambda () (interactive)(join-line -1)))
                             (,(kbd "M-t w")   . transpose-words)
                             (,(kbd "M-t l")   . transpose-lines)
                             (,(kbd "M-t s")   . transpose-sexps)
                             (,(kbd "C-x y")   . ces/copy-symbol-at-point)
                             (,(kbd "C-c r")   . revert-buffer)
                             (,(kbd "C-c /")   . ces/comment-or-uncomment-line-or-region))))
      (global-unset-key (kbd "M-t"))
      (dolist (ces-keybinding ces-keybindings)
        (global-set-key (car ces-keybinding) (cdr ces-keybinding))))

    (add-hook 'emacs-lisp-mode-hook       'eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'eldoc-mode)

    (use-package eldoc
      :defer     t
      :diminish  eldoc-mode)

    (use-package multiple-cursors
      :ensure    multiple-cursors
      :init      (setq mc/list-file "~/.emacs.d/data/mc.el")
      :bind      (("C-c me" . mc/edit-lines)
                  ("C-c ma" . mc/mark-all-like-this)))

    (use-package smartparens
      :ensure    smartparens
      :init      (progn
                   (require 'smartparens)
                   (load-library "smartparens-config"))

      :config   (progn
                  (smartparens-global-mode t)
                  (sp-with-modes '(html-mode sgml-mode nxml-mode web-mode)
                    (sp-local-pair "<" ">"))

                  (define-key sp-keymap (kbd "C-M-f") 'sp-forward-sexp)
                  (define-key sp-keymap (kbd "C-M-b") 'sp-backward-sexp)

                  (define-key sp-keymap (kbd "C-M-e") 'sp-up-sexp)
                  (define-key sp-keymap (kbd "C-M-d") 'sp-down-sexp)

                  (define-key sp-keymap (kbd "C-M-u") 'sp-backward-up-sexp)
                  (define-key sp-keymap (kbd "C-M-a") 'sp-backward-down-sexp)

                  (define-key sp-keymap (kbd "C-S-a") 'sp-beginning-of-sexp)
                  (define-key sp-keymap (kbd "C-S-d") 'sp-end-of-sexp)

                  (define-key sp-keymap (kbd "C-M-t") 'sp-transpose-sexp)

                  (define-key sp-keymap (kbd "C-M-n") 'sp-next-sexp)
                  (define-key sp-keymap (kbd "C-M-p") 'sp-previous-sexp)

                  (define-key sp-keymap (kbd "C-M-k") 'sp-kill-sexp)
                  (define-key sp-keymap (kbd "C-M-w") 'sp-copy-sexp))

      :diminish smartparens-mode)

    (use-package cl-lib-highlight
      :ensure    cl-lib-highlight
      :init      (cl-lib-highlight-initialize))

    (use-package ispell
      :init      (defun ispell-line()
                   (interactive)
                   (ispell-region (line-beginning-position) (line-end-position)))
      :bind      (("C-c sr" . ispell-region)
                  ("C-c sb" . ispell-buffer)
                  ("C-c sw" . ispell-word)
                  ("C-c sl" . ispell-line)))
  #+end_src
  
* UI configuration
** Misc

   #+begin_src emacs-lisp

     (setq visible-bell             t
           display-time-24hr-format t
           use-dialog-box           nil
           default-frame-alist      `((font . ,ces-ui-font)))

     (use-package smart-mode-line
       :ensure    smart-mode-line
       :init      (setq sml/theme 'respectful)
       :config    (sml/setup))

     (defun turn-on-linum-hl-mode-hook ()
       (interactive)
       (hl-line-mode 1)
       (linum-mode 1))

     (use-package nxml-mode
       :init      (add-hook 'nxml-mode-hook 'turn-on-linum-hl-mode-hook))

   #+end_src

** Themes

   #+begin_src emacs-lisp

     (defun ces/load-theme (theme-symbol)
       (when (and (boundp theme-symbol)
                  (symbol-value theme-symbol))
         (funcall 'load-theme (symbol-value theme-symbol) t)))
     
     (if window-system
         (ces/load-theme 'ces-ui-theme)
       (ces/load-theme 'ces-ui-theme-console))

   #+end_src

** Fonts

   #+begin_src emacs-lisp

     (defun ces/fontify-frame (frame)
       (set-frame-parameter frame 'font ces-ui-font))

     (defun ces/set-current-font ()
       (interactive)
       ;; Fontify current frame
       (ces/fontify-frame nil)
       ;; Fontify any future frames
       (push 'ces/fontify-frame after-make-frame-functions))

     (if window-system
         (ces/set-current-font))

   #+end_src

* User settings

  #+begin_src emacs-lisp

    (when (file-exists-p ces-user-file)
      (load ces-user-file 'noerror))

    (message "chrisp-emacs-setup done loading.")

  #+end_src
